'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import ApiService from '@/lib/api';
import Modal from '@/components/Modal';

interface Book {
  id: string;
  title: string;
  author: string | null;
  class: string | null;
  createdAt: string;
  lastEditedAt: string | null;
  lastEditAction: string | null;
  ownerId: string;
  lastEditedBy: string | null;
  ownerEmail: string;
  lastEditorEmail: string | null;
  chaptersCount: number;
}

interface BooksResponse {
  success: boolean;
  message: string;
  data: {
    books: Book[];
    total: number;
    page: number;
    limit: number;
    totalPages: number;
  };
}

export default function BooksPage() {
  const [books, setBooks] = useState<Book[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [total, setTotal] = useState(0);
  const [limit, setLimit] = useState(10);
  const [selectedBooks, setSelectedBooks] = useState<Set<string>>(new Set());
  const [exportingFormat, setExportingFormat] = useState<string | null>(null);
  const [modal, setModal] = useState<{
    isOpen: boolean;
    title: string;
    message: string;
    type: 'success' | 'error' | 'warning' | 'info';
  }>({
    isOpen: false,
    title: '',
    message: '',
    type: 'info',
  });

  useEffect(() => {
    fetchBooks();
  }, [currentPage, searchQuery, limit]);

  const fetchBooks = async () => {
    try {
      setLoading(true);
      const response: BooksResponse = await ApiService.getAllBooks({
        page: currentPage,
        limit,
        search: searchQuery || undefined,
      });

      if (response.success) {
        setBooks(response.data.books);
        setTotal(response.data.total);
        setTotalPages(response.data.totalPages);
      }
    } catch (error) {
      console.error('Error fetching books:', error);
    } finally {
      setLoading(false);
    }
  };

  const formatDate = (dateString: string | null) => {
    if (!dateString) return '‚Äî';
    return new Date(dateString).toLocaleDateString('ru-RU', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const translateEditAction = (action: string | null) => {
    if (!action) return '‚Äî';
    const translations: Record<string, string> = {
      'updated_title': '–ò–∑–º–µ–Ω—ë–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫',
      'updated_description': '–ò–∑–º–µ–Ω–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ',
      'updated_author': '–ò–∑–º–µ–Ω—ë–Ω –∞–≤—Ç–æ—Ä',
      'updated_settings': '–ò–∑–º–µ–Ω–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
      'updated_book': '–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–Ω–∏–≥–∞',
    };
    return translations[action] || action;
  };

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    setCurrentPage(1);
    fetchBooks();
  };

  const handlePageChange = (newPage: number) => {
    if (newPage >= 1 && newPage <= totalPages) {
      setCurrentPage(newPage);
    }
  };

  const handleSelectAll = (checked: boolean) => {
    if (checked) {
      setSelectedBooks(new Set(books.map(b => b.id)));
    } else {
      setSelectedBooks(new Set());
    }
  };

  const handleSelectBook = (bookId: string, checked: boolean) => {
    const newSelected = new Set(selectedBooks);
    if (checked) {
      newSelected.add(bookId);
    } else {
      newSelected.delete(bookId);
    }
    setSelectedBooks(newSelected);
  };

  const showModal = (title: string, message: string, type: 'success' | 'error' | 'warning' | 'info') => {
    setModal({ isOpen: true, title, message, type });
  };

  const closeModal = () => {
    setModal({ ...modal, isOpen: false });
  };

  const handleExportSelected = async (format: 'html' | 'docx' | 'pdf') => {
    if (selectedBooks.size === 0) {
      showModal('–û—à–∏–±–∫–∞', '–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞', 'warning');
      return;
    }

    try {
      setExportingFormat(format);

      const token = ApiService.getToken();
      const backendUrl = process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:3000';

      if (format === 'pdf') {
        showModal(
          '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
          'PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTML –∏–ª–∏ DOCX —Ñ–æ—Ä–º–∞—Ç.',
          'info'
        );
        setExportingFormat(null);
        return;
      }

      let successCount = 0;
      let errorCount = 0;

      // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–∏–≥—É
      for (const bookId of Array.from(selectedBooks)) {
        const book = books.find(b => b.id === bookId);

        try {
          const response = await fetch(`${backendUrl}/api/export/book/${bookId}/${format}`, {
            headers: {
              'Authorization': `Bearer ${token}`,
            },
          });

          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error?.message || '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞');
          }

          const blob = await response.blob();
          const url = window.URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = `${book?.title || 'book'}.${format}`;
          document.body.appendChild(a);
          a.click();
          window.URL.revokeObjectURL(url);
          document.body.removeChild(a);

          successCount++;

          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–≥—Ä—É–∑–∫–∞–º–∏
          await new Promise(resolve => setTimeout(resolve, 500));
        } catch (error) {
          console.error(`Export error for book ${bookId}:`, error);
          errorCount++;
        }
      }

      // –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä –ø–æ—Å–ª–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
      setSelectedBooks(new Set());

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if (errorCount === 0) {
        showModal(
          '–£—Å–ø–µ—à–Ω–æ',
          `–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${successCount} ${successCount === 1 ? '–∫–Ω–∏–≥–∞' : '–∫–Ω–∏–≥'} –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${format.toUpperCase()}`,
          'success'
        );
      } else if (successCount === 0) {
        showModal(
          '–û—à–∏–±–∫–∞',
          `–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω—É –∫–Ω–∏–≥—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.`,
          'error'
        );
      } else {
        showModal(
          '–ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö',
          `–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${successCount}, –û—à–∏–±–æ–∫: ${errorCount}`,
          'warning'
        );
      }
    } catch (error) {
      console.error('Export error:', error);
      showModal(
        '–û—à–∏–±–∫–∞',
        error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∫–Ω–∏–≥',
        'error'
      );
    } finally {
      setExportingFormat(null);
    }
  };

  const handleLimitChange = (newLimit: number) => {
    setLimit(newLimit);
    setCurrentPage(1);
  };

  if (loading && books.length === 0) {
    return (
      <div className="min-h-screen bg-gray-50 py-12">
        <div className="max-w-7xl mx-auto px-4">
          <div className="text-center">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-12">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="mb-8 flex justify-between items-start">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 mb-4">
              –í—Å–µ –∫–Ω–∏–≥–∏
            </h1>
            <p className="text-gray-600">
              –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∫–Ω–∏–≥ –≤ —Å–∏—Å—Ç–µ–º–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            </p>
          </div>
          <div className="flex gap-3 items-center">
            {selectedBooks.size > 0 && (
              <div className="flex gap-2 items-center">
                <span className="text-sm text-gray-600">
                  –í—ã–±—Ä–∞–Ω–æ: {selectedBooks.size}
                </span>
                <button
                  onClick={() => handleExportSelected('html')}
                  disabled={!!exportingFormat}
                  className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 text-sm"
                >
                  {exportingFormat === 'html' ? '–≠–∫—Å–ø–æ—Ä—Ç...' : 'üìÑ HTML'}
                </button>
                <button
                  onClick={() => handleExportSelected('docx')}
                  disabled={!!exportingFormat}
                  className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:opacity-50 text-sm"
                >
                  {exportingFormat === 'docx' ? '–≠–∫—Å–ø–æ—Ä—Ç...' : 'üìù DOCX'}
                </button>
                <button
                  onClick={() => handleExportSelected('pdf')}
                  disabled={!!exportingFormat}
                  className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 disabled:opacity-50 text-sm"
                >
                  {exportingFormat === 'pdf' ? '–≠–∫—Å–ø–æ—Ä—Ç...' : 'üìï PDF'}
                </button>
              </div>
            )}
            <Link
              href="/"
              className="bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700"
            >
              ‚Üê –ù–∞–∑–∞–¥
            </Link>
          </div>
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-8">
          <div className="bg-white p-4 rounded-lg shadow text-center">
            <h3 className="text-sm font-medium text-gray-700 mb-1">–í—Å–µ–≥–æ –∫–Ω–∏–≥</h3>
            <p className="text-2xl font-bold text-gray-900">{total}</p>
          </div>
          <div className="bg-white p-4 rounded-lg shadow text-center">
            <h3 className="text-sm font-medium text-gray-700 mb-1">–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</h3>
            <p className="text-2xl font-bold text-blue-600">{currentPage} / {totalPages}</p>
          </div>
          <div className="bg-white p-4 rounded-lg shadow text-center">
            <h3 className="text-sm font-medium text-gray-700 mb-1">–ü–æ–∫–∞–∑–∞–Ω–æ</h3>
            <p className="text-2xl font-bold text-green-600">{books.length}</p>
          </div>
        </div>

        {/* –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã */}
        <div className="bg-white rounded-lg shadow mb-6 p-4">
          <div className="flex gap-4 items-center">
            <form onSubmit={handleSearch} className="flex-1 flex gap-4">
              <input
                type="text"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∞–≤—Ç–æ—Ä—É..."
                className="flex-1 px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                spellCheck={true}
                lang="ru"
              />
              <button
                type="submit"
                className="bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700"
              >
                –ü–æ–∏—Å–∫
              </button>
              {searchQuery && (
                <button
                  type="button"
                  onClick={() => {
                    setSearchQuery('');
                    setCurrentPage(1);
                  }}
                  className="bg-gray-200 text-gray-700 px-6 py-2 rounded-md hover:bg-gray-300"
                >
                  –°–±—Ä–æ—Å–∏—Ç—å
                </button>
              )}
            </form>
            <div className="flex items-center gap-2">
              <label className="text-sm text-gray-600">–ü–æ–∫–∞–∑–∞—Ç—å:</label>
              <select
                value={limit}
                onChange={(e) => handleLimitChange(Number(e.target.value))}
                className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value={5}>5</option>
                <option value={10}>10</option>
                <option value={25}>25</option>
                <option value={50}>50</option>
                <option value={100}>100</option>
              </select>
            </div>
          </div>
        </div>

        {/* –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ */}
        <div className="bg-white shadow rounded-lg overflow-hidden">
          <div className="px-6 py-4 border-b border-gray-200">
            <h2 className="text-xl font-semibold">
              –ö–Ω–∏–≥–∏ ({books.length} –∏–∑ {total})
            </h2>
          </div>

          {books.length === 0 ? (
            <div className="text-center py-8 text-gray-500">
              {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : searchQuery ? '–ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : '–ö–Ω–∏–≥ –ø–æ–∫–∞ –Ω–µ—Ç'}
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left">
                      <input
                        type="checkbox"
                        checked={selectedBooks.size === books.length && books.length > 0}
                        onChange={(e) => handleSelectAll(e.target.checked)}
                        className="w-4 h-4 text-blue-600 rounded"
                      />
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      –ö–ª–∞—Å—Å
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      –ì–ª–∞–≤
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      –°–æ–∑–¥–∞–Ω–∞
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      –†–µ–¥–∞–∫—Ç–æ—Ä (–ª–æ–≥–∏–Ω)
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      –ß—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–æ
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {books.map((book) => (
                    <tr key={book.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4">
                        <input
                          type="checkbox"
                          checked={selectedBooks.has(book.id)}
                          onChange={(e) => handleSelectBook(book.id, e.target.checked)}
                          className="w-4 h-4 text-blue-600 rounded"
                        />
                      </td>
                      <td className="px-6 py-4">
                        <div className="text-sm font-medium text-gray-900">
                          {book.title}
                        </div>
                      </td>
                      <td className="px-6 py-4 text-sm text-gray-900">
                        {book.class || <span className="text-gray-400">‚Äî</span>}
                      </td>
                      <td className="px-6 py-4 text-sm text-center text-gray-900">
                        {book.chaptersCount}
                      </td>
                      <td className="px-6 py-4 text-sm text-gray-900 whitespace-nowrap">
                        {formatDate(book.createdAt)}
                      </td>
                      <td className="px-6 py-4 text-sm text-gray-900 whitespace-nowrap">
                        {formatDate(book.lastEditedAt)}
                      </td>
                      <td className="px-6 py-4 text-sm text-gray-600">
                        {book.lastEditorEmail ? (
                          <span
                            className="font-medium cursor-help"
                            title={`Email: ${book.lastEditorEmail}`}
                          >
                            {book.lastEditorEmail.split('@')[0]}
                          </span>
                        ) : (
                          <span className="text-gray-400">‚Äî</span>
                        )}
                      </td>
                      <td className="px-6 py-4 text-sm text-gray-600">
                        {translateEditAction(book.lastEditAction)}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>

        {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
        {totalPages > 1 && (
          <div className="mt-6 flex justify-center items-center gap-2">
            <button
              onClick={() => handlePageChange(currentPage - 1)}
              disabled={currentPage === 1}
              className="px-4 py-2 bg-white border border-gray-300 rounded-md disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50"
            >
              ‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∞—è
            </button>

            <div className="flex gap-1">
              {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é, –ø–æ—Å–ª–µ–¥–Ω—é—é, —Ç–µ–∫—É—â—É—é –∏ –ø–æ –æ–¥–Ω–æ–π —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –æ—Ç —Ç–µ–∫—É—â–µ–π
                if (
                  page === 1 ||
                  page === totalPages ||
                  (page >= currentPage - 1 && page <= currentPage + 1)
                ) {
                  return (
                    <button
                      key={page}
                      onClick={() => handlePageChange(page)}
                      className={`px-4 py-2 rounded-md ${
                        currentPage === page
                          ? 'bg-blue-600 text-white'
                          : 'bg-white border border-gray-300 hover:bg-gray-50'
                      }`}
                    >
                      {page}
                    </button>
                  );
                } else if (
                  page === currentPage - 2 ||
                  page === currentPage + 2
                ) {
                  return <span key={page} className="px-2">...</span>;
                }
                return null;
              })}
            </div>

            <button
              onClick={() => handlePageChange(currentPage + 1)}
              disabled={currentPage === totalPages}
              className="px-4 py-2 bg-white border border-gray-300 rounded-md disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50"
            >
              –°–ª–µ–¥—É—é—â–∞—è ‚Üí
            </button>
          </div>
        )}

        {/* Modal */}
        <Modal
          isOpen={modal.isOpen}
          onClose={closeModal}
          title={modal.title}
          message={modal.message}
          type={modal.type}
        />
      </div>
    </div>
  );
}
